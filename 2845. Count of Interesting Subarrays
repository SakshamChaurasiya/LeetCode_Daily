class Solution {
    public long countInterestingSubarrays(List<Integer> nums, int modulo, int k) {
        Map<Integer, Long> prefixCount = new HashMap<>();
        prefixCount.put(0, 1L); // Initial base case for prefix count

        long result = 0;
        int count = 0;

        for (int num : nums) {
            if (num % modulo == k) {
                count++;
            }

            // Compute the required remainder we want to find
            int target = ((count - k) % modulo + modulo) % modulo;

            // Add number of times this remainder has appeared before
            result += prefixCount.getOrDefault(target, 0L);

            // Update the current prefix modulo count
            int currentMod = count % modulo;
            prefixCount.put(currentMod, prefixCount.getOrDefault(currentMod, 0L) + 1);
        }

        return result;
    }
}
